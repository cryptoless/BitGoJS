"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZcashTransactionBuilder = void 0;
const types = require("bitcoinjs-lib/src/types");
const typeforce = require('typeforce');
const networks = require("../../networks");
const ZcashTransaction_1 = require("./ZcashTransaction");
const UtxoTransactionBuilder_1 = require("../UtxoTransactionBuilder");
const address_1 = require("./address");
class ZcashTransactionBuilder extends UtxoTransactionBuilder_1.UtxoTransactionBuilder {
    constructor(network) {
        super(network);
    }
    createInitialTransaction(network, tx) {
        return new ZcashTransaction_1.ZcashTransaction(network, tx);
    }
    static fromTransaction(transaction) {
        const txb = new ZcashTransactionBuilder(transaction.network);
        // Copy transaction fields
        txb.setVersion(transaction.version, !!transaction.overwintered);
        txb.setLockTime(transaction.locktime);
        // Copy Zcash overwinter fields. Omitted if the transaction builder is not for Zcash.
        if (txb.tx.isOverwinterCompatible()) {
            txb.setVersionGroupId(transaction.versionGroupId);
            txb.setExpiryHeight(transaction.expiryHeight);
        }
        txb.setConsensusBranchId(transaction.consensusBranchId);
        // Copy outputs (done first to avoid signature invalidation)
        transaction.outs.forEach(function (txOut) {
            txb.addOutput(txOut.script, txOut.value);
        });
        // Copy inputs
        transaction.ins.forEach(function (txIn) {
            txb.__addInputUnsafe(txIn.hash, txIn.index, {
                sequence: txIn.sequence,
                script: txIn.script,
                witness: txIn.witness,
                value: txIn.value,
            });
        });
        return txb;
    }
    setVersion(version, overwinter = true) {
        typeforce(types.UInt32, version);
        /* istanbul ignore next */
        if (!networks.zcash.consensusBranchId.hasOwnProperty(this.tx.version)) {
            throw new Error('Unsupported Zcash transaction');
        }
        this.tx.overwintered = overwinter ? 1 : 0;
        this.tx.consensusBranchId = networks.zcash.consensusBranchId[version];
        this.tx.version = version;
    }
    setConsensusBranchId(consensusBranchId) {
        typeforce(types.UInt32, consensusBranchId);
        /* istanbul ignore next */
        if (!this.__INPUTS.every(function (input) {
            return input.signatures === undefined;
        })) {
            throw new Error('Changing the consensusBranchId for a partially signed transaction would invalidate signatures');
        }
        this.tx.consensusBranchId = consensusBranchId;
    }
    setVersionGroupId(versionGroupId) {
        typeforce(types.UInt32, versionGroupId);
        this.tx.versionGroupId = versionGroupId;
    }
    setExpiryHeight(expiryHeight) {
        typeforce(types.UInt32, expiryHeight);
        this.tx.expiryHeight = expiryHeight;
    }
    build() {
        return super.build();
    }
    buildIncomplete() {
        return super.buildIncomplete();
    }
    addOutput(scriptPubKey, value) {
        // Attempt to get a script if it's a base58 or bech32 address string
        if (typeof scriptPubKey === 'string') {
            scriptPubKey = address_1.toOutputScript(scriptPubKey, this.network);
        }
        return super.addOutput(scriptPubKey, value);
    }
}
exports.ZcashTransactionBuilder = ZcashTransactionBuilder;
//# sourceMappingURL=data:application/json;base64,